# vim: ts=2:sw=2

- hosts: all
  tasks:
    - name: Assert we are root
      assert:
        that:
          - "ansible_env.USER == 'root'"

    - name: Ensure we have sudo
      package:
        state: present
        name:
          - sudo

    - name: Check whether we already generated a user
      shell:
        cmd: "grep -m1 -e master /etc/passwd | sed -e 's/:.*//'"
      register: checked_username
      changed_when: checked_username.stdout == ''

    - name: Set username
      set_fact:
        username: "{{ checked_username.stdout }}"
      when:
        - checked_username.stdout != ''

    - name: Generate new username and add it
      block:
        - name: Generate new username
          set_fact:
            username: "{{ lookup('community.general.random_pet', separator='') }}"

        - name: Generate password
          delegate_to: localhost
          shell:
            cmd: "pwgen -1 12"
          register: pwgen_out

        - name: Assign password to fact
          set_fact:
            password: "{{ pwgen_out.stdout }}"
  
        - name: create_user
          user:
            create_home: yes
            generate_ssh_key: yes
            name: "{{ username }}"
            password: "{{ password | password_hash('sha512') }}"
            comment: "master"
            groups: adm,sudo
          
      when:
        - checked_username.stdout == ''
          
          
    - name: Display username we are working with
      debug:
        msg: "Username: {{ username }}"

    - name: "Push public ssh key"
      authorized_key:
        user: "{{ username }}"
        state: present
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"

    - name: "get local username"
      delegate_to: localhost
      shell: whoami
      register: whoami

    - set_fact:
        local_user: "{{ whoami.stdout }}"

    - name: write local ssh config
      delegate_to: localhost
      community.general.ssh_config:
        state: present
        remote_user: "{{ username }}"
        user: "{{ local_user }}"
        host: "{{ ansible_hostname }}"
        hostname: "{{ inventory_hostname | split('@') | last }}"

    - name: print username and password
      debug:
        msg: "Username: {{ username }} with password: {{ password }}"
      when: password is defined
                                    
                                    
